y + b1*x1 + b2 + b3*x1
# Question 25
plot(data=mtcars, wt~mpg)
mylm.t <- lm(data=mtcars, log(wt)~mpg)
plot(data=mtcars, log(wt)~mpg)
plot(data=mtcars, log(mpg)~wt)
# Question 25
plot(data=mtcars, wt~mpg)
# Question 25
plot(data=mtcars, mpg~wt)
mylm.t <- lm(data=mtcars, log(wt)~mpg)
b <- coef(mylm.t)
b
curve(exp(b[1]+b[2]*x), add=TRUE)
mylm.t <- lm(data=mtcars, log(wt)~mpg)
b <- coef(mylm.t)
curve(exp(b[1]+b[2]*x), add=TRUE)
b
plot( data=Utilities
,gasbill ~ temp
,main="Normal Graph - curve line")
#logarithmic lm
U.lm.log <- lm(data=Utilities, log(gasbill) ~ temp)
b <- coef(U.lm.log)
curve(exp(b[1]+b[2]*x), add=TRUE)
# Question 25
plot(data=mtcars, mpg~wt)
mylm.t <- lm(data=mtcars, log(mpg)~wt)
b <- coef(mylm.t)
curve(exp(b[1]+b[2]*x), add=TRUE)
exp(predict(mylm.t, data.frame(wt=2050), interval="confidence"))
exp(predict(mylm.t, data.frame(wt=2050), interval="prediction"))
2.03756e-286
# intervals for the prediction
pred.u.lm.log <- exp(predict(mylm.t, data.frame(wt=2050), interval="prediction"))
# Quick way to get predictions on there
abline(h=pred.u.lm.log, lty=2, col="skyblue", lwd=2)
abline(v=30, lty=2, col="skyblue", lwd=2)
abline(v=30, lty=2, col="skyblue", lwd=2)
# intervals for the confidence
conf.u.lm <- exp(predict(mylm.t, data.frame(wt=2050), interval="confidence"))
# Quick way to get predictions on there
abline(h=conf.u.lm, lty=2, col="hotpink")
abline(v=30, lty=2, col="hotpink", lwd=1)
mylm.t <- lm(data=mtcars, log(mpg)~wt)
conf.u.lm
# intervals for the prediction
pred.u.lm.log <- exp(predict(mylm.t, data.frame(wt=2050), interval="prediction"))
# Quick way to get predictions on there
abline(h=pred.u.lm.log, lty=2, col="skyblue", lwd=2)
pred.u.lm.log
# Question 25
plot(data=mtcars, mpg~wt)
mylm.t <- lm(data=mtcars, log(mpg)~wt)
b <- coef(mylm.t)
curve(exp(b[1]+b[2]*x), add=TRUE)
exp(predict(mylm.t, data.frame(wt=2050), interval="confidence"))
exp(predict(mylm.t, data.frame(wt=2050), interval="prediction"))
pred.u.lm.log
exp(predict(mylm.t, data.frame(wt=2050), interval="confidence"))
exp(exp(predict(mylm.t, data.frame(wt=2050), interval="confidence")))
exp(exp(predict(mylm.t, data.frame(wt=2050), interval="prediction")))
exp(predict(mylm.t, data.frame(wt=2050), interval="confidence"))
exp(predict(mylm.t, data.frame(wt=2050), interval="prediction"))
predict(mylm.t, data.frame(wt=2050), interval="confidence")
predict(mylm.t, data.frame(wt=2050), interval="prediction")
?mtcars
exp(predict(mylm.t, data.frame(wt=2.050), interval="confidence"))
exp(predict(mylm.t, data.frame(wt=2.050), interval="prediction"))
exp(predict(mylm.t, data.frame(wt=2.050), interval="prediction"))
exp(predict(mylm.t, data.frame(wt=2.050), interval="prediction"))
b0 + b1*x1 + b2 + b3*x1
b0 <- 3.86370
b1 <- -0.02532
b2 <- -5.88493
b3 <- 0.05708
x1 <- 50
b0 + b1*x1 + b2 + b3*x1
# Question 6
library(tidyverse)
names(Utilities)
mylm <- lm(totalbill~month, data=Utilities)
plot(totalbill~month, data=Utilities) # y,x
mylo <- loess(totalbill~month, data=Utilities, degree=2, span=0.3)
summary(mylm.loess)
lines(lowess(Utilities$month, Utilities$totalbill), col="firebrick")
summary(mylo)
predict(mylo, data.frame(month=9), interval="prediction")
# Question 9
names(Utilities)
mylm <- lm(data=Utilities, ccf~year)
plot(data=Utilities, ccf~year)
abline(mylm)
summary(mylm)
table(Utilities$year)
# Question 9
names(Utilities)
mylm <- lm(data=Utilities, ccf~year)
summary(lm(data=Utilities, year~ccf))
-8.264e-04
summary(lm(data=Utilities, ccf~year))
# Question 9
names(Utilities)
# Question 12
mylm <- lm(data=Utilities, elecbill~kwh)
summary(mylm)
pt ( ( -0.2142366 ) , 115 ) *2
# Question 20
names(Chile)
plot(data=Chile, income~population)
mylm <- lm(data=Chile, income~population))
summary(mylm)
mylm <- lm(data=Chile, income~population)
summary(mylm)
abline(mylm)
par(mfrow=c(1,3))
plot(which=1:3, mylm)
summary(mylm)
plot(which=1:6, mylm)
plot(which=1:3, mylm)
plot(data=Chile, income~population)
par(mfrow=c(1,1))
plot(data=Chile, income~population)
mylm <- lm(data=Chile, income~population)
abline(mylm)
par(mfrow=c(1,3))
plot(which=1:3, mylm)
par(mfrow=c(1,1))
sqrt(0.04822)
round(sqrt(0.04822),2)
round(sqrt(0.04822),3)
round(sqrt(0.04822),3)
mylm <- lm(data=Utilities, ccf~year)
pairs(Utilities, panel = panel.smooth)
summary(lm(data=Utilities, ccf~
year
+temp
))
summary(lm(data=Utilities, ccf~
year
+temp
+I(month^2)
))
summary(lm(data=Utilities, ccf~
year
+temp
+I(month^2)
+totalbill
))
68
68*100/25
68*25/100
17*4
18*4
lm2 <- lm(log(mpg) ~ wt, data=mtcars)
plot(mpg ~ wt, data=mtcars, pch=16, col="firebrick", ylim=c(0,40))
b<-coef(lm2)
curve(exp(b[1]+b[2]*x), add=TRUE, col="darkgray")
preds <- exp(predict(lm2, data.frame(wt=2.05), interval="prediction"))
lines(c(0,2.02,2.02,0), c(preds[3],preds[3],preds[2],preds[2]), lty=2, col="gray")
lines(c(2.05,2.05,2.05), preds, lwd=4, col="firebrick")
# Answer:
85.7380 -0.1187*150 -29.8786 + 0.2950*150 = 82.3044
y <- 85.7380
b1 <- -0.1187
b2 <- -29.8786
b3 <- 0.2950
x1 <- 150
y + b1*x1 + b2 + b3*x1
# Answer:
85.7380 -0.1187*150 -29.8786 + 0.2950*150 # 82.3044
#The logistic regression curves in the graph are dropping from left to right. This implies a negative slope term. Thus, only the two options using -0.21747 are possible answers. Next, we deduce that the red line (the one corresponding to summer) is higher than the black line (which must be baseline because Spring/Fall doesn't show up in the summary output). This implies that the "Summer" term must be positive, 2.05293. That leaves us with only one possible answer.
#If you are curious, here is the code that made the plot:glm1 <- glm(Temp > 80 ~ Wind + as.factor(Month %in% c(6,7,8)), data=airquality, family=binomial).
summary(glm1)
glm1 <- glm(Temp > 80 ~ Wind + as.factor(Month %in% c(6,7,8)), data=airquality, family=binomial).
summary(glm1)
plot((Temp > 80) + (Month %in% 6:8)*.01 - 0.005 ~ Wind, data=airquality, col=as.factor(Month %in% 6:8), ylab="Probability of Temp > 80")
legend("topright", cex=0.8, title="Month", legend=c("Spring/Fall", "Summer"), pch=16, col=palette())
b <- coef(glm1); curve(1/(1+exp(-b[1] - b[2]*x)), add=TRUE, col=palette()[1])
b <- coef(glm1); curve(1/(1+exp(-b[1] - b[2]*x - b[3] )), add=TRUE, col=palette()[2])
b <- coef(glm1); curve(1/(1+exp(-b[1] - b[2]*x)), add=TRUE, col=palette()[1])
glm1 <- glm(Temp > 80 ~ Wind + as.factor(Month %in% c(6,7,8)), data=airquality, family=binomial).
glm1 <- glm(Temp > 80 ~ Wind + as.factor(Month %in% c(6,7,8)), data=airquality, family="binomial").
summary(glm1)
glm1 <- glm(Temp > 80 ~ Wind + as.factor(Month %in% c(6,7,8)), data=airquality, family="binomial").
glm1 <- glm(Temp > 80 ~ Wind + as.factor(Month %in% c(6,7,8)), data=airquality, family="binomial")
summary(glm1)
plot((Temp > 80) + (Month %in% 6:8)*.01 - 0.005 ~ Wind, data=airquality, col=as.factor(Month %in% 6:8), ylab="Probability of Temp > 80")
legend("topright", cex=0.8, title="Month", legend=c("Spring/Fall", "Summer"), pch=16, col=palette())
b <- coef(glm1); curve(1/(1+exp(-b[1] - b[2]*x)), add=TRUE, col=palette()[1])
b <- coef(glm1); curve(1/(1+exp(-b[1] - b[2]*x - b[3] )), add=TRUE, col=palette()[2])
# Answer: There are various ways to solving this... one way would be:
## Original value:
summary(lm(dist ~ speed, data=cars))$sigma
## New value:
dist2 = cars$dist; dist2[16] = 12
summary(lm(dist2 ~ speed, data=cars))$sigma
summary(lm(dist2 ~ speed, data=cars))$sigma
summary(lm(dist2 ~ speed, data=cars))$sigma # 15.64979
#Another way would be to create this graph:
plot(dist ~ speed, data=cars, col=ifelse(1:50 == 16, "green","gray"), pch=16) ##Run code to see the graph
#Another way would be to create this graph:
plot(dist ~ speed, data=cars, col=ifelse(1:50 == 16, "green","gray"), pch=16) ##Run code to see the graph
# Answer:
lm.prestige2 <- lm(income ~ prestige + type:prestige, data=Pre)
summary(lm.prestige2)
# Answer: The most important thing to notice in the plot is that the y-intercepts of the two lines are equal.
# That requires that we choose the following for the lm... and the p-value is then the change in slope term type:prestige, which is 0.357 (not significant in this case).
lm.prestige2 <- lm(income ~ prestige + type:prestige, data=Pre)
# Answer: The most important thing to notice in the plot is that the y-intercepts of the two lines are equal.
# That requires that we choose the following for the lm... and the p-value is then the change in slope term type:prestige, which is 0.357 (not significant in this case).
lm.prestige2 <- lm(income ~ prestige + type:prestige, data=Prestige2)
summary(lm.prestige2)
# Question 18
Prestige2 <- mutate(Prestige, type = as.factor(ifelse(type == "prof", 1,0)))
plot(data=Prestige2, income~prestige, col=type)
names(Prestige2)
str(Prestige2)
mylm <- lm(data=Prestige2, income~prestige+type+prestige:type)
summary(mylm)
#Wrong answer
plot(temp ~ month, data=Utilities)
b <- coef(lm(temp ~ month + I(month^2) + I(month^3), data=Utilities))
curve(b[1]+8 + .2*b[2]*x + 2.3*b[3]*x^2 + 1.5*b[4]*x^3, add=TRUE)
plot(temp ~ month, data=Utilities)
b <- coef(lm(temp ~ month + I(month^2) + I(month^3), data=Utilities))
curve(b[1]+8 + .2*b[2]*x + 2.3*b[3]*x^2 + 1.5*b[4]*x^3, add=TRUE)
#Wrong answer
plot(temp ~ month, data=Utilities)
b <- coef(lm(temp ~ month + I(month^2) + I(month^3), data=Utilities))
curve(b[1]-8 + .6*b[2]*x + 2.3*b[3]*x^2 + 1.7*b[4]*x^3, add=TRUE)
#Wrong answer
plot(temp ~ month, data=Utilities)
x <- seq(1,12, .2)
lines(x, predict(loess(temp ~ month, data=Utilities, span=.5), data.frame(month=x)))
# Question 14
mylm <- lm(data=Utilities, totalbill ~ kwh + ccf + year)
summary(mylm)
3.9324  + qt ( 1 - 0.05 / 2 , 48 ) * 0.4155 # slope
3.9324  + qt ( 1 - 0.05 / 2 , 48 ) * 0.4155 # slope
# Answer:
t = (0.108754 - 0.11)/0.005816 #the 0.11 is the null hypothesis value.
pt(-abs(t), 115)*2 #two-sided p-value # 0.830742
# Answer:
lm1 <- lm(totalbill ~ gasbill, data=Utilities)
pairs(cbind(R=lm1$res, fit=lm1$fit, Utilities))
#Looking at the plot in the top-right corner (2nd in from left) it is pretty clear that elecbill will provide incredible insight into predicting "totalbill" once gasbill has already been included in the regression. This makes sense as likely totalbill = gasbill + elecbill. In fact, it comes pretty close to being perfect:
summary(lm(totalbill ~ gasbill + elecbill, data=Utilities))
# Answer:
lm.u <- lm(gasbill ~ ccf, data=Utilities)
summary(lm.u)
# Question 9
mylm <- lm(data=Utilities, ccf~year)
summary(mylm)
# Answer:
lm.u <- lm(gasbill ~ ccf, data=Utilities)
summary(lm.u)
# Answer:
lmgas <- lm(totalbill ~ gasbill, data=Utilities)
predict(lmgas, data.frame(gasbill=150), interval="prediction")
plot(totalbill ~ gasbill, data=Utilities)
plot(Temp ~ Ozone, data=airquality)
mylo.o <- loess(Temp ~ Ozone, data=airquality, span=0.6)
x <- seq(0,180, 1)
lines(x, predict(mylo.o, data.frame(Ozone=x)))
plot(Temp ~ Ozone, data=airquality)
mylo.o <- loess(Temp ~ Ozone, data=airquality, span=0.3)
x <- seq(0,180, 1)
lines(x, predict(mylo.o, data.frame(Ozone=x)))
plot(Temp ~ Ozone, data=airquality)
mylo.o <- loess(Temp ~ Ozone, data=airquality, span=0.1)
# A bunch of warnings appear for this one because the span is too small to be useful.
x <- seq(0,180, 1)
lines(x, predict(mylo.o, data.frame(Ozone=x)))
plot(Temp ~ Ozone, data=airquality)
mylo.o <- loess(Temp ~ Ozone, data=airquality) #the default span when none is specified is 0.75
x <- seq(0,180, 1)
lines(x, predict(mylo.o, data.frame(Ozone=x)))
# A bunch of warnings appear for this one because the span is too small to be useful.
x <- seq(0,180, 1)
lines(x, predict(mylo.o, data.frame(Ozone=x)))
plot(Temp ~ Ozone, data=airquality)
mylo.o <- loess(Temp ~ Ozone, data=airquality, span=0.1)
# A bunch of warnings appear for this one because the span is too small to be useful.
x <- seq(0,180, 1)
lines(x, predict(mylo.o, data.frame(Ozone=x)))
plot(Temp ~ Ozone, data=airquality)
mylo.o <- loess(Temp ~ Ozone, data=airquality, span=0.6)
mylo.o <- loess(Temp ~ Ozone, data=airquality, span=0.3)
plot(Temp ~ Ozone, data=airquality)
plot(Temp ~ Ozone, data=airquality)
mylo.o <- loess(Temp ~ Ozone, data=airquality, span=0.6)
x <- seq(0,180, 1)
lines(x, predict(mylo.o, data.frame(Ozone=x)))
mylo.o <- loess(Temp ~ Ozone, data=airquality, span=0.3)
x <- seq(0,180, 1)
lines(x, predict(mylo.o, data.frame(Ozone=x)))
plot(Temp ~ Ozone, data=airquality)
mylo.o <- loess(Temp ~ Ozone, data=airquality, span=1)
x <- seq(0,180, 1)
lines(x, predict(mylo.o, data.frame(Ozone=x)))
mylo.o <- loess(Temp ~ Ozone, data=airquality, span=0.3)
x <- seq(0,180, 1)
lines(x, predict(mylo.o, data.frame(Ozone=x)))
plot(Temp ~ Ozone, data=airquality)
mylo.o <- loess(Temp ~ Ozone, data=airquality, span=0.6)
x <- seq(0,180, 1)
lines(x, predict(mylo.o, data.frame(Ozone=x)))
# Answer:
mylo <- loess(totalbill ~ month, data=Utilities, span=.3, degree=2)
predict(mylo, data.frame(month=9))
# For fun, draw it to see what is going on.
plot(totalbill ~ month, data=Utilities)
x <- seq(1,12,.2)
lines(x, predict(mylo, data.frame(month=x)))
predict(mylo, data.frame(month=9), interval="prediction")
plot(totalbill~month, data=Utilities) # y,x
lines(lowess(Utilities$month, Utilities$totalbill), col="firebrick")
lines(x, predict(mylo, data.frame(month=x)))
x <- seq(1,12,.9)
lines(x, predict(mylo, data.frame(month=x)))
x <- seq(1,12,1)
lines(x, predict(mylo, data.frame(month=x)))
x <- seq(1,12,0.2)
lines(x, predict(mylo, data.frame(month=x)))
x <- seq(1,12,.2)
lines(x, predict(mylo, data.frame(month=x)))
# Answer:
ccf.lm <- lm(temp ~ ccf, data=Utilities)
boxCox(ccf.lm)
# Plot shows best choice to be between 0.4 to a little below 0.8. From our list of Y-transformations shown in the textbook, the square root, or 0.5 transformation would be the best option.
ccf.lm.transformed <- lm(sqrt(temp) ~ ccf, data=Utilities)
summary(ccf.lm.transformed)
plot(temp ~ ccf, data=Utilities)
curve((8.523 - 0.021*x)^2, add=TRUE, col="skyblue")
mylm.t <- lm(sqrt(temp) ~ ccf, data=Utilities)
summary(mylm)
plot((temp) ~ ccf, data=Utilities)
b <- coef(mylm.t)
abline(mylm, col="red", lwd=3)
curve((8.523 - 0.021*x)^2, add=TRUE, col="skyblue", lwd=3)
abline(mylm, col="red", lwd=3)
mylm <- lm(data=Utilities, temp~ccf)
abline(mylm, col="red", lwd=3)
mylm <- lm(data=Utilities, temp~ccf)
mylm.t <- lm(sqrt(temp) ~ ccf, data=Utilities)
plot(sqrt(temp) ~ ccf, data=Utilities)
abline(mylm.t)
plot((temp) ~ ccf, data=Utilities)
summary(mylm)
b <- coef(mylm.t)
curve((8.523 - 0.021*x)^2, add=TRUE, col="skyblue", lwd=3)
abline(mylm, col="red", lwd=3)
summary(ccf.lm.transformed)
summary(mylm.t)
summary(mylm)
# Answer:
lm.kwh <- lm(kwh ~ year + temp + year:temp, data=Utilities)
summary(lm.kwh)
# Answer:
#To perform the regression:
lm.kwh <- lm(kwh ~ year + temp + year:temp, data=Utilities)
summary(lm.kwh)
#To diagnose the regression we start here:
plot(lm.kwh, which=1)
#This identifies points 14, 94, and 53 as possible outliers. However, to determine the influence a point has on the regression, we need to consider the Cook's Distance (or some other measurement like leverage). This plot gives us Cook's Distances:
plot(lm.kwh, which=4)
#To diagnose the regression we start here:
plot(lm.kwh, which=1)
#This identifies points 14, 94, and 53 as possible outliers. However, to determine the influence a point has on the regression, we need to consider the Cook's Distance (or some other measurement like leverage). This plot gives us Cook's Distances:
plot(lm.kwh, which=4)
mylm <- lm(data=Utilities, kwh~year + temp + year:temp)
plot(mylm, which=5)
#This identifies points 14, 94, and 53 as possible outliers. However, to determine the influence a point has on the regression, we need to consider the Cook's Distance (or some other measurement like leverage). This plot gives us Cook's Distances:
plot(lm.kwh, which=4)
mylm <- lm(data=Utilities, kwh~year + temp + year:temp)
plot(mylm, which=5)
# Question 2
b0 <- 3.86370
b1 <- -0.02532
b2 <- -5.88493
b3 <- 0.05708
x1 <- 50
b0 + b1*x1 + b2 + b3*x1
# Answer:
exp(3.86370 -0.02532*50 -5.88493*1 + 0.05708*50*1)/ (1 + exp(3.86370 -0.02532*50 -5.88493*1 + 0.05708*50*1))
exp( - (3.86370 -0.02532*50 -5.88493*1 + 0.05708*50*1) )
1 - exp( - (3.86370 -0.02532*50 -5.88493*1 + 0.05708*50*1) )
1 / ( 1 + exp( - (3.86370 -0.02532*50 -5.88493*1 + 0.05708*50*1) ) )
# OR
lm <- 3.86370 -0.02532*50 -5.88493*1 + 0.05708*50*1
1 / ( 1 + exp( - (lm) ) ) # 0.3933553
# OR
x1 <- 50
lm <- 3.86370 -0.02532*x1 -5.88493*1 + 0.05708*x1*1
1 / ( 1 + exp( - (lm) ) ) # 0.3933553
3.86370 -0.02532*x1 -5.88493 + 0.05708*x1
1 / ( 1 + exp( - (lm) ) ) # 0.3933553
# Answer:
cats.lm <- lm(Hwt ~ Bwt, data=cats)
summary(cats.lm)
R.version
?CO2
View(CO2)
library(tidyverse) #loads the filter(...) function
CO2.chilled.250 <- filter(reatment == "chilled" & conc == 250)
?CO2
View(CO2)
CO2.chilled.250 <- filter(Treatment == "chilled" & conc == 250)
CO2.chilled.250 <- filter(conc == 250) %>% (Treatment == "chilled")
library(tidyverse) #loads the filter(...) function
install.packages("tidyverse")
library(tidyverse) #loads the filter(...) function
CO2.chilled.250 <- filter(conc == 250) %>% (Treatment == "chilled")
setwd("~/EXOXY/Personal Projects/Programming/Public/RStudio/docs")
library(tidyverse)
# library(car)
library(ggpubr)
library(pander)
library(DT)
dat <- read.csv("train.csv")
# datatable(dat, options=list(lengthMenu = c(10)), extensions="Buttons")
#
# datatable(head(dat, 20), options = list(
#   columnDefs = list(list(className = 'dt-center', targets = 5)),
#   pageLength = 5,
#   lengthMenu = c(5, 10, 15, 20)))
set.seed(121)
num_rows <- 1000 #1460 total
keep <- sample(1:nrow(dat), num_rows)
dat2 <- dat %>%
mutate(
TotalSF = `X1stFlrSF` + `X2ndFlrSF` + `TotalBsmtSF`,
OverallQual = case_when(
OverallQual >= 9 ~ "Qual9Up",
OverallQual <= 4 ~ "Qual4Less",
TRUE ~ as.character(paste0("Qual",OverallQual))),
SalePriceLog = log(SalePrice),
MSZoning2 = case_when(
MSZoning %in% c("RH", "RL", "RM", "RP") ~ "ZoningR",
MSZoning == "C (all)" ~ "ZoningC",
TRUE ~paste0("Zoning", MSZoning)),
GarageCars = case_when(
GarageCars >= 3 ~ "Garage3Up",
TRUE ~ as.character(paste0("Garage", GarageCars))),
TotalSF = ifelse(TotalSF > 7000, base::mean(TotalSF), TotalSF),
OverallQual = as.factor(OverallQual),
GarageCars = as.factor(GarageCars),
MSZoning2 = as.factor(MSZoning2)) %>%
select(TotalSF, SalePriceLog,SalePrice, MSZoning2, GarageCars, OverallQual) %>%
mutate(
rownum = 1:n(), value = 1) %>%
spread(OverallQual, value, fill = 0) %>%
mutate(value = 1) %>%
spread(MSZoning2, value, fill = 0) %>%
mutate(value = 1) %>%
spread(GarageCars, value, fill = 0)
mytrain <- dat2[keep, ] #Use this in the lm(..., data=mytrain)
mytest <- dat2[-keep, ] #Use this in the predict(..., newdata=mytest)
lm1 <- lm(SalePriceLog~
TotalSF
+Qual4Less
+Qual5
+Qual6
+Qual7
+Qual8
+Qual4Less:Garage2:TotalSF
+Qual5:Garage1:TotalSF
+Qual5:Garage2
+Qual6:Garage2
+Qual8:Garage3Up:TotalSF
,data = mytrain)
yht <- predict(lm1, newdata = mytest)
# Compute y-bar
ybar <- mean(mytest$SalePriceLog) #Yi is given by Ynew from the new sample of data
# Compute SSTO
SSTO <- sum( (mytest$SalePriceLog - ybar)^2 )
# Compute SSE for each model using y - yhat
SSEt <- sum( (mytest$SalePriceLog - yht)^2 )
# Compute R-squared for each
rst <- 1 - SSEt/SSTO
# Compute adjusted R-squared for each
n <- length(mytest$SalePriceLog) #sample size
pt <- length(coef(lm1)) #num. parameters in model
rsta <- 1 - (n-1)/(n-pt)*SSEt/SSTO
my_output_table <- data.frame(
`Original R2`           = summary(lm1)$r.squared,
`Orig. Adj. R-squared` = summary(lm1)$adj.r.squared,
`Validation R-squared` = rst,
`Validation Adj. R^2`  = rsta)
colnames(my_output_table) <- c("Original $R^2$", "Original Adj. $R^2$", "Validation $R^2$", "Validation Adj. $R^2$")
b <- coef(lm1)
dat3 <- dat2 %>%
pivot_longer(cols = starts_with("Qual"), names_to = "OverallQual") %>%
filter(value == 1) %>%
select(-value) %>%
pivot_longer(cols = starts_with("Garage"), names_to = "GarageCars") %>%
filter(value == 1)%>%
select(-value) %>%
pivot_longer(cols = starts_with("Zoning"), names_to = "MSZoning") %>%
filter(value == 1) %>%
select(-value)
dat3 %>%
mutate(GarageCars = case_when(
GarageCars %in% c("Garage0", "Garage1", "Garage3Up") ~ "Garage013",
TRUE ~ GarageCars
)) %>%
ggplot(aes(TotalSF, SalePriceLog))+
geom_point()
install.packages("mosaic")
install.packages("mosaic")
install.packages("mosaic")
